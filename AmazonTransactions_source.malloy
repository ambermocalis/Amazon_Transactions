
source: fields is duckdb.table("data/fields.csv") extend {
    rename: survey_dimension_key is column0
}

source: states is duckdb.table("data/2020_Census_Codes_States.csv") extend {
    primary_key: STATE_NAME
    --dimension: state_name is STATE_NAME
}

source: demographics is duckdb.table("data/survey.csv") extend {
    primary_key: `Survey ResponseID`

    dimension: 
        demos_state_abbr is states.STATE
        hh_size is replace(`Q-amazon-use-hh-size`, " (just me!)", "")
        acct_users is replace(`Q-amazon-use-howmany`, " (just me!)", "")
        order_freq is 
            pick "< 5x/month" when `Q-amazon-use-how-oft` = "Less than 5 times per month"
            pick "5-10x/month" when `Q-amazon-use-how-oft` = "5 - 10 times per month"
            else "10x+/month"
        age_group is replace(`Q-demos-age`, " years", "")
        income_cleaned is replace(`Q-demos-income`, "Less than $25,000", "$0 - $24,999") 
        income_more_than is 
            pick 0 when income_cleaned = "$0 - $24,999"
            pick 25 when income_cleaned = "$25,000 - $49,999"
            pick 50 when income_cleaned = "$50,000 - $74,999"
            pick 75 when income_cleaned = "$75,000 - $99,999"
            pick 100 when income_cleaned = "$100,000 - $149,999"
            pick 150 when income_cleaned = "$150,000 or more"
            else null
        education_ranked is
            pick 0 when `Q-demos-education` = "Some high school or less"
            pick 1 when `Q-demos-education` = "High school diploma or GED"
            pick 2 when `Q-demos-education` = "Bachelor's degree"
            pick 3 when `Q-demos-education` = "Graduate or professional degree (MA, MS, MBA, PhD, JD, MD, DDS, etc)"
            else null
        race is
            pick "Two or More Races" when strpos(`Q-demos-race`, ',') != 0
            else `Q-demos-race`

    join_one: states with `Q-demos-state`
}

source: transactions is duckdb.table("./data/amazon-purchases.csv") extend {
    primary_key: `Survey ResponseID`

    dimension: 
        LineCost is `Purchase Price Per Unit` * `Quantity`
        Item_Description is concat(`ASIN/ISBN (Product Code)`, " - ", `Title`)
        `Order Year` is `Order Date`.years
        `Order Day` is day_of_week(`Order Date`) // where day 0 = Saturday & day 6 = Friday
        
    # bar_chart {size=lg, title="Histogram of Price Per Unit Distribution"}
    view: hist_by_price is {
    aggregate: bin_size is (max(`Purchase Price Per Unit`)-min(`Purchase Price Per Unit`)) / 2000
    nest: data is {
        group_by: `Purchase Price Per Unit`
        aggregate: product_count_distinct
        }
    } -> {
    group_by: `Purchase Price Per Unit` is
        floor(data.`Purchase Price Per Unit` / bin_size) * nullif(bin_size, 0) + bin_size / 2
    aggregate: product_count is data.product_count_distinct.sum()
    order_by: `Purchase Price Per Unit`
    }
    view: `Top 5 Categories` is {
        group_by: Category
        aggregate: items_purchased
        limit: 5
        where: Category is not null
    }
    view: `Top 5 Spending Categories` is {
        group_by: Category
        # currency
        aggregate: total_cost
        limit: 5
        where: Category is not null
    }
    # bar_chart
    view: `Bar: Top Categories by Units Sold` is {
        group_by: Category
        aggregate: items_purchased
        limit: 10
        where: Category is not null
    }    view: `Top Categories` is {
        group_by: Category
        aggregate: items_purchased
        limit: 10
        where: Category is not null
    }
    view: `% Purchases by Age` is {
        group_by: demographics.age_group
        # percent
        aggregate: `% Purchases` is items_purchased / all(items_purchased)
        order_by: age_group
    }
    view: `Day of Month` is {
        group_by: `Day of Month` is `Order Date`.day
        aggregate: items_purchased
        order_by: `Day of Month`
    }
    view: `Categories by Year` is {
        group_by: `Order Year`
        aggregate: num_rows
        order_by: `Order Year`
        where: `Order Year` < @2023
    }
    view: `Purchases by Day` is {
        group_by: `Order Day`
        aggregate: items_purchased
        order_by: `Order Day`
    }
    view: `Purchases by Year` is {
        group_by: `Order Year`
        aggregate: items_purchased
        order_by: `Order Year`
    }
    view: `Purchases by Age` is {
        group_by: demographics.age_group
        aggregate: items_purchased
        order_by: age_group
    }
    view: `Purchases by Age w Variation` is {
        group_by: demographics.age_group
        # percent
        aggregate: 
            `% Purchases` is items_purchased / all(items_purchased)
            `% Respondents` is count(`Survey ResponseID`) / all(count(`Survey ResponseID`))
            `% Variation` is ((items_purchased / all(items_purchased)) - (count(`Survey ResponseID`) / all(count(`Survey ResponseID`)))) // negative means less than 1:1 purchase ratio, positive means more than 1:1 ratio of purchasers to purchases.
        order_by: `% Variation` desc
    }
    view: `% Purchases by Gender` is {
        where: demographics.`Q-demos-gender` != "Prefer not to say"
        group_by: `Order Year`, Gender is demographics.`Q-demos-gender`
        # percent
        aggregate: `% Purchases` is items_purchased / all(items_purchased)
        order_by: `% Purchases` desc
    }
    view: `Purchase Amount by Gender` is {
        --where: demographics.`Q-demos-gender` != "Prefer not to say"
        group_by: `Order Year`, Gender is demographics.`Q-demos-gender`
        aggregate: # currency
            total_cost
            --# percent
            --`% of Purchase Amount` is total_cost / all(total_cost)
    }
     view: `% Purchase Amount by Gender` is {
        --where: demographics.`Q-demos-gender` != "Prefer not to say"
        group_by: `Order Year`, Gender is demographics.`Q-demos-gender`
        aggregate: # percent
            `% of Purchase Amount` is total_cost / all(total_cost)
        order_by: `% of Purchase Amount` desc
    }
    view: `Purchases by Race` is {
        group_by: demographics.race
        aggregate: # percent
            `% Purchases` is items_purchased / all(items_purchased)
        # tooltip
        nest: `Purchases Insight` is {
            where: Category is not null
            group_by: Category
            aggregate: items_purchased
            limit: 5
        }
    }
   view: `Purchases by Income` is {
        where: demographics.income_cleaned != "Prefer not to say"
        group_by: demographics.income_cleaned
        aggregate: items_purchased
    }
    view: `Purchases by Education` is {
        where: demographics.education_ranked != null
        group_by: demographics.`Q-demos-education`
        aggregate: items_purchased
    }
    view: `% Purchase Amount by Income` is {
        where: demographics.income_cleaned != "Prefer not to say"
        group_by: demographics.income_cleaned
        # percent
        aggregate: Purchases is total_cost / all(total_cost)
    }
    view: `% Purchase Amount by Education` is {
        where: demographics.education_ranked != null
        group_by: demographics.`Q-demos-education`
        # percent
        aggregate: Purchases is total_cost / all(total_cost)
    }
    view: `Total Respondents by State` is {
        group_by: demographics.states.STATE
        aggregate: `Respondents` is num_respondents
    }
    view: `Total Purchases by State` is {
        group_by: demographics.states.STATE
        aggregate: # currency
            `Total Purchases` is total_cost
    }
    view: purchases_by_product_name is {
        group_by: Title
        aggregate: amount_sold is sum(Quantity)
    }
   
    measure:
        num_categories is count(Category)
        num_respondents is count(`Survey ResponseID`)
        num_rows is count()
        --num_orders is count() {where: `Survey ResponseID` AND `Order Date` are same}
        items_purchased is sum(Quantity)
        total_cost is sum(LineCost)
        product_count_distinct is count(`ASIN/ISBN (Product Code)`)
        `% Purchases` is items_purchased / all(items_purchased)
        `% Sales` is sum(LineCost) / all(sum(LineCost))

        --calculate: 
            

    join_one: demographics with `Survey ResponseID`
}

run: transactions -> {
    select: `Purchase Price Per Unit`, `Quantity`, LineCost
    limit: 5
    where: Quantity > 1
}

run: transactions -> {
    aggregate: num_null is count(Item_Description)
    --where: `ASIN/ISBN (Product Code)` != null AND Title != null
}

run: transactions -> {
    aggregate: distinct_items is count(Item_Description)
}

run: demographics -> {
    group_by: `Q-demos-education`
    aggregate: num_users is count(acct_users)
}
